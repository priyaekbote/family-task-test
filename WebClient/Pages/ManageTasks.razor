@page "/manage-tasks"
@inject WebClient.Abstractions.ITaskDataService TaskDataService
@inject WebClient.Abstractions.IMemberDataService MemberDataService
@using FamilyTask.Components
@using FamilyTask.Shared.Components

@if (isLoaded)
{
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu MenuItems="@leftMenuItem" OnAddItem="@onAddItem" DroppedTask="@SuppliedTask" />
        </div>
        <div class="col-8 p-0">
            @if (showLister)
            {
                <div class="col-10 offset-1 pt-5">
                    <div class="row m-0">
                        <Field class="col-9 p-0 custom-input">
                            <TextEdit Placeholder="Enter New Task" @bind-Text="@taskTitle" />
                        </Field>
                        <div class="col-3 p-0 text-right">
                            <Button class="add-btn px-4" @onclick="@onAddTaskClick">Add</Button>
                        </div>
                    </div>
                </div>
                <div class="col-10 offset-1">
                    <TaskListerComponent Tasks="@tasksToShow" @bind-Task="SuppliedTask" />
                </div>
            }
            @if (showCreator)
            {
                <div class="col-10 offset-1 pt-5">
                    <FamilyMemberCreator onAddCallback="@onMemberAdd" />
                </div>
            }
        </div>
    </div>
}

@code {
    private FamilyMember[] members;
    private MenuItem[] leftMenuItem;
    private TaskModel[] tasksToShow;
    private TaskModel[] allTasks;
    private bool isLoaded;
    private bool showLister;
    private bool showCreator;
    private string taskTitle;
    private TaskModel SuppliedTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        List<TaskModel> taskModels = new List<TaskModel>();
        List<FamilyMember> familyMembers = new List<FamilyMember>();
        var taskVms = (await TaskDataService.GetAllTasks()).Tasks.ToList();
        var memberVms = (await MemberDataService.GetAllMembers()).Payload.ToList();

        foreach (var memberVm in memberVms)
        {
            familyMembers.Add(new FamilyMember
            {
                id = memberVm.Id,
                firstname = memberVm.FirstName,
                lastname = memberVm.LastName,
                email = memberVm.Email,
                avtar = memberVm.Avatar,
                role = memberVm.Role
            });
        }
        members = familyMembers.ToArray();

        foreach (var taskVm in taskVms)
        {
            var taskMember = familyMembers.FirstOrDefault(x => x.id == taskVm.AssignedToId);
            taskModels.Add(new TaskModel
            {
                id = taskVm.Id,
                isDone = taskVm.IsComplete,
                text = taskVm.Subject,
                member = taskMember
            });
        }
        allTasks = taskModels.ToArray();

        leftMenuItem = new MenuItem[members.Count() + 1];
        leftMenuItem[0] = new MenuItem
        {
            label = "All Tasks",
            referenceId = Guid.Empty,
            isActive = true
        };
        leftMenuItem[0].ClickCallback += showAllTasks;
        for (int i = 1; i < members.Count() + 1; i++)
        {
            leftMenuItem[i] = new MenuItem
            {
                iconColor = members[i - 1].avtar,
                label = members[i - 1].firstname,
                referenceId = members[i - 1].id,
                isActive = false
            };
            leftMenuItem[i].ClickCallback += onItemClick;
        }
        showAllTasks(null, leftMenuItem[0]);
        isLoaded = true;
    }

    private void onAddItem() {
        showLister = false;
        showCreator = true;
        makeMenuItemActive(null);
        StateHasChanged();
    }

    private void onItemClick(object sender, object e) {
        Guid val = (Guid)e.GetType().GetProperty("referenceId").GetValue(e);
        makeMenuItemActive(e);
        if (allTasks != null && allTasks.Length > 0)
        {
            tasksToShow = allTasks.Where(item =>
            {
                if (item.member != null)
                {
                    return item.member.id == val;
                }
                else
                {
                    return false;
                }
            }).ToArray();
        }
        Console.WriteLine(val);
        Console.WriteLine(tasksToShow.Length);
        showLister = true;
        showCreator = false;
        StateHasChanged();
    }

    private void showAllTasks(object sender, object e) {
        tasksToShow = allTasks;
        showLister = true;
        showCreator = false;
        makeMenuItemActive(e);
        StateHasChanged();
    }

    private void makeMenuItemActive(object e) {
        foreach (var item in leftMenuItem)
        {
            item.isActive = false;
        }
        if (e != null)
        {
            e.GetType().GetProperty("isActive").SetValue(e, true);
        }
    }

    private void onMemberAdd() {
        Console.WriteLine("on member add");
    }

    private async void onAddTaskClick() {
        await TaskDataService.Create(new Domain.Commands.CreateTaskCommand
        {
            Subject = taskTitle,
            IsComplete = false
        });

        taskTitle = string.Empty;
        await OnInitializedAsync();
    }
}